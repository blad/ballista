syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.andygrove.ballista";
option java_outer_classname = "BallistaProto";

package ballista;

// copied from GandivaType from Apache Arrow project
enum ArrowType {
  NONE = 0;     // arrow::Type::NA
  BOOL = 1;     // arrow::Type::BOOL
  UINT8 = 2;    // arrow::Type::UINT8
  INT8 = 3;     // arrow::Type::INT8
  UINT16 = 4;   // represents arrow::Type fields in src/arrow/type.h
  INT16 = 5;
  UINT32 = 6;
  INT32 = 7;
  UINT64 = 8;
  INT64 = 9;
  HALF_FLOAT = 10;
  FLOAT = 11;
  DOUBLE = 12;
  UTF8 = 13;
  BINARY = 14;
  FIXED_SIZE_BINARY = 15;
  DATE32 = 16;
  DATE64 = 17;
  TIMESTAMP = 18;
  TIME32 = 19;
  TIME64 = 20;
  INTERVAL = 21;
  DECIMAL = 22;
  LIST = 23;
  STRUCT = 24;
  UNION = 25;
  DICTIONARY = 26;
  MAP = 27;
}

message ExprNode {

  ColumnIndex column_index = 11;

  BinaryExpr binary_expr = 20;
  AggregateExpr aggregate_expr = 21;
}

message ColumnIndex {
  uint32 index = 1;
}

message BinaryExpr {
  ExprNode l = 1;
  ExprNode r = 2;
  string op = 3;
}

enum AggregateFunction {
  MIN = 0;
  MAX = 1;
  SUM = 2;
  AVG = 3;
  COUNT = 4;
  COUNT_DISTINCT = 5;
}

message AggregateExpr {
  AggregateFunction aggr_function = 1;
  ExprNode expr = 2;
}

// LogicalPlan is a nested type
message LogicalPlanNode {

  LogicalPlanNode input = 1;

  File file = 10;

  Projection projection = 20;
  Selection selection = 21;
  Limit limit = 22;
  Aggregate aggregate = 23;
}

message File {
  string filename = 1;
  Schema schema = 2;
  repeated uint32 projection = 3;
}

message Projection {
  repeated ExprNode expr = 1;
}

message Selection {
  ExprNode expr = 2;
}

message Aggregate {
  repeated ExprNode group_expr = 1;
  repeated ExprNode aggr_expr = 2;
}

message Limit {
  uint32 limit = 1;
}

message Field {
  // name of the field
  string name = 1;
  ArrowType arrow_type = 2;
  bool nullable = 3;
  // for complex data types like structs, unions
  repeated Field children = 4;
}

message Schema {
  repeated Field columns = 1;
}

message TableMeta {
  string table_name = 1;
  string filename = 2;
  string file_type = 3;
  Schema schema = 4;
}

// for now this is just CSV data so I can get the end to end PoC working quickly but this needs to be
// IPC format eventually
message RecordBatch {
  string data = 1;
}

service Executor {
  rpc execute(ExecuteRequest) returns (ExecuteResponse) {}
}

message ExecuteRequest {
  LogicalPlanNode plan = 1;
  repeated TableMeta table_meta = 2;
}

message ExecuteResponse {
  string message = 1;
  repeated RecordBatch batch = 2;
}